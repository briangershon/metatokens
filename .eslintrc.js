module.exports = {
    root : true,
    plugins : [
        "@typescript-eslint",
        "eslint-plugin-local-rules",
    ],
    parser : "@typescript-eslint/parser",
    parserOptions : {
        project : "./tsconfig.tests.json",
        sourceType : "module",
    },
    overrides : [
        {
            files : [
                ".eslintrc.js",
            ],
            parserOptions : {
                project : "./tsconfig.other.json",
                sourceType : "module",
            },
        },
        {
            files : ["eslint-local-rules/*"],
            parserOptions : {
                project : "./eslint-local-rules/tsconfig.json",
                sourceType : "module",
            },
        },
    ],
    extends : [
        "eslint:recommended",
        "plugin:@typescript-eslint/recommended",
        "plugin:@typescript-eslint/recommended-requiring-type-checking",
    ],
    rules : {
        // Local rules
        "local-rules/type-annotation-spacing" : [
            "error",
            {
                before : true,
                after : true,
                beforeOptional : false,
                afterOptional : true,
            },
        ],
        
        // Warnings
        "no-template-curly-in-string" : "warn",
        "no-unmodified-loop-condition" : "warn",
        complexity : "warn",
        "max-depth" : "warn",
        "max-nested-callbacks" : [
            "error",
            {
                max : 5,
            },
        ],
        "no-warning-comments" : "warn",
        "max-len" : [
            "error",
            {
                "code" : 120,
                "ignoreComments" : false,
                "ignoreTrailingComments" : false,
            },
        ],

        // Errors
        "no-constant-condition" : "off",
        "no-control-regex" : "off",
        "no-debugger" : "error",
        "no-labels" : "error",
        "arrow-body-style" : "error",
        "capitalized-comments" : [
            "error",
            "always",
            {
                ignoreConsecutiveComments : true,
                ignoreInlineComments : true,
            },
        ],
        curly : "error",
        eqeqeq : "error",
        "multiline-comment-style" : ["error", "separate-lines"],
        "no-confusing-arrow" : "error",
        "no-floating-decimal" : "error",
        "no-lonely-if" : "error",
        "no-unneeded-ternary" : "error",
        "no-var" : "error",
        "one-var-declaration-per-line" : ["error", "always"],
        "operator-assignment" : "error",
        "prefer-arrow-callback" : "error",
        "prefer-const" : "error",
        "prefer-numeric-literals" : "error",
        "prefer-object-spread" : "error",
        "prefer-template" : "error",
        "quote-props" : ["error", "as-needed"],
        "spaced-comment" : [
            "error",
            "always",
            {
                exceptions : ["-", "*", "/"],
            },
        ],
        yoda : [
            "error",
            "never",
            {
                exceptRange : true,
            },
        ],
        "array-callback-return" : [
            "error",
            {
                checkForEach : true,
            },
        ],
        "no-constructor-return" : "error",
        "no-promise-executor-return" : "error",
        "no-self-compare" : "error",
        "no-unreachable-loop" : "error",
        "consistent-return" : "error",
        "max-classes-per-file" : "error",
        "no-caller" : "error",
        "no-empty-function" : "error",
        "no-eval" : "error",
        "no-extend-native" : "error",
        "no-implied-eval" : "error",
        "no-loop-func" : "error",
        "no-mixed-operators" : "error",
        "no-multi-assign" : "error",
        "no-multi-str" : "error",
        "no-nested-ternary" : "error",
        "no-new" : "error",
        "no-new-func" : "error",
        "no-new-object" : "error",
        "no-new-wrappers" : "error",
        "no-octal-escape" : "error",
        // "no-param-reassign" : "error",
        "no-proto" : "error",
        "no-return-assign" : "error",
        "no-sequences" : [
            "error",
            {
                allowInParentheses : false,
            },
        ],
        "no-useless-call" : "error",
        "no-useless-concat" : "error",
        "prefer-promise-reject-errors" : "error",
        "prefer-regex-literals" : "error",

        // Formatting
        "array-bracket-newline" : ["error", "consistent"],
        "array-bracket-spacing" : "error",
        "array-element-newline" : ["error", "consistent"],
        "arrow-parens" : "error",
        "arrow-spacing" : "error",
        "comma-style" : "error",
        "computed-property-spacing" : "error",
        "eol-last" : "error",
        "function-call-argument-newline" : ["error", "consistent"],
        "function-paren-newline" : ["error", "multiline-arguments"],
        "generator-star-spacing" : "error",
        indent : [
            "error",
            4,
            {
                SwitchCase : 1,
                ignoredNodes : ["ConditionalExpression"],
            },
        ],
        "key-spacing" : [
            "error",
            {
                beforeColon : true,
                afterColon : true,
                mode : "strict",
            },
        ],
        "linebreak-style" : "error",
        "new-parens" : "error",
        "newline-per-chained-call" : "error",
        "no-multi-spaces" : [
            "error",
            {
                ignoreEOLComments : true,
            },
        ],
        "no-multiple-empty-lines" : "error",
        "no-tabs" : "error",
        "no-trailing-spaces" : "error",
        "no-whitespace-before-property" : "error",
        "object-curly-newline" : [
            "error",
            {
                multiline : true,
                consistent : true,
            },
        ],
        "object-property-newline" : "error",
        "operator-linebreak" : "error",
        "padded-blocks" : ["error", "never"],
        "rest-spread-spacing" : "error",
        "semi-spacing" : "error",
        "semi-style" : "error",
        "space-before-blocks" : "error",
        "space-in-parens" : "error",
        "space-unary-ops" : [
            "error",
            {
                words : true,
                nonwords : false,
            },
        ],
        "switch-colon-spacing" : "error",
        "template-curly-spacing" : "error",
        "template-tag-spacing" : "error",
        "wrap-iife" : ["error", "inside"],

        // @typescript-eslint
        "@typescript-eslint/ban-ts-comment" : [
            "error",
            {
                "ts-expect-error" : "allow-with-description",
                "ts-nocheck" : "allow-with-description",
                minimumDescriptionLength : 8,
            },
        ],
        "@typescript-eslint/no-misused-promises" : [
            "error",
            {
                checksConditionals : true,
                checksVoidReturn : false,
            },
        ],
        "@typescript-eslint/array-type" : "error",
        "@typescript-eslint/ban-tslint-comment" : "error",
        "@typescript-eslint/consistent-type-definitions" : ["error", "interface"],
        "@typescript-eslint/member-delimiter-style" : "error",
        "@typescript-eslint/method-signature-style" : "error",
        "@typescript-eslint/no-confusing-non-null-assertion" : "error",
        "@typescript-eslint/no-dynamic-delete" : "error",
        "@typescript-eslint/no-meaningless-void-operator" : "error",
        "@typescript-eslint/no-unnecessary-boolean-literal-compare" : "error",
        "@typescript-eslint/no-unnecessary-condition" : [
            "error",
            {
                allowConstantLoopConditions : true,
            }
        ],
        "@typescript-eslint/no-unnecessary-type-arguments" : "error",
        "@typescript-eslint/prefer-function-type" : "error",
        "@typescript-eslint/prefer-includes" : "error",
        "@typescript-eslint/prefer-regexp-exec" : "error",
        "@typescript-eslint/prefer-string-starts-ends-with" : "error",
        "@typescript-eslint/prefer-ts-expect-error" : "error",
        "@typescript-eslint/promise-function-async" : "error",
        "@typescript-eslint/strict-boolean-expressions" : "error",
        "brace-style" : "off",
        "@typescript-eslint/brace-style" : "error",
        "comma-dangle" : "off",
        "@typescript-eslint/comma-dangle" : ["error", "always-multiline"],
        "comma-spacing" : "off",
        "@typescript-eslint/comma-spacing" : "error",
        "dot-notation" : "off",
        "@typescript-eslint/dot-notation" : "error",
        "func-call-spacing" : "off",
        "@typescript-eslint/func-call-spacing" : "error",
        "keyword-spacing" : "off",
        "@typescript-eslint/keyword-spacing" : "error",
        "no-extra-parens" : "off",
        "@typescript-eslint/no-extra-parens" : "off",
        "object-curly-spacing" : "off",
        "@typescript-eslint/object-curly-spacing" : ["error", "always"],
        quotes : "off",
        "@typescript-eslint/quotes" : [
            "error",
            "double",
            {
                allowTemplateLiterals : true,
            },
        ],
        semi : "off",
        "@typescript-eslint/semi" : "error",
        "space-before-function-paren" : "off",
        "@typescript-eslint/space-before-function-paren" : [
            "error",
            {
                anonymous : "always",
                named : "never",
                asyncArrow : "always",
            },
        ],
        "space-infix-ops" : "off",
        "@typescript-eslint/space-infix-ops" : ["error", { int32Hint : false }],
        "@typescript-eslint/consistent-type-assertions" : [
            "error",
            {
                assertionStyle : "as",
                objectLiteralTypeAssertions : "never",
            },
        ],
        "@typescript-eslint/no-invalid-void-type" : "error",
        "@typescript-eslint/prefer-literal-enum-member" : "error",
        "@typescript-eslint/switch-exhaustiveness-check" : "error",
        "no-dupe-class-members" : "off",
        "@typescript-eslint/no-dupe-class-members" : "error",
        "no-duplicate-imports" : "off",
        "@typescript-eslint/no-duplicate-imports" : "error",
        "no-invalid-this" : "off",
        "@typescript-eslint/no-invalid-this" : "error",
        "no-redeclare" : "off",
        "@typescript-eslint/no-redeclare" : "error",
        "no-shadow" : "off",
        "@typescript-eslint/no-shadow" : "error",
        "no-throw-literal" : "off",
        "@typescript-eslint/no-throw-literal" : "error",
        "no-unused-expressions" : "off",
        "@typescript-eslint/no-unused-expressions" : "error",
        "no-use-before-define" : "off",
        "@typescript-eslint/no-use-before-define" : [
            "error",
            {
                functions : false,
                classes : true,
                variables : true,
                enums : true,
                typedefs : false,
                ignoreTypeReferences : false,
            },
        ],
        "no-useless-constructor" : "off",
        "@typescript-eslint/no-useless-constructor" : "error",
        "no-unused-vars": "off",
        "@typescript-eslint/no-unused-vars": [
            "error",
            {
                vars : "all",
                args : "none",
            },
        ],

        // These are too hyperactive
        "@typescript-eslint/no-explicit-any" : "off",
        "@typescript-eslint/no-unsafe-argument" : "off",
        "@typescript-eslint/no-unsafe-assignment" : "off",
        "@typescript-eslint/no-unsafe-call" : "off",
        "@typescript-eslint/no-unsafe-member-access" : "off",
    },
};
